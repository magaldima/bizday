// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

/*
Package calendar is a generated protocol buffer package.

It is generated from these files:
	calendar.proto

It has these top-level messages:
	BinaryDateRequest
	DayCountFractionResponse
*/
package calendar

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import github_com_magaldima_bizday_api "github.com/magaldima/bizday/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BinaryDateRequest struct {
	Start *github_com_magaldima_bizday_api.Date `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *github_com_magaldima_bizday_api.Date `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *BinaryDateRequest) Reset()                    { *m = BinaryDateRequest{} }
func (m *BinaryDateRequest) String() string            { return proto.CompactTextString(m) }
func (*BinaryDateRequest) ProtoMessage()               {}
func (*BinaryDateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BinaryDateRequest) GetStart() *github_com_magaldima_bizday_api.Date {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *BinaryDateRequest) GetEnd() *github_com_magaldima_bizday_api.Date {
	if m != nil {
		return m.End
	}
	return nil
}

type DayCountFractionResponse struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *DayCountFractionResponse) Reset()                    { *m = DayCountFractionResponse{} }
func (m *DayCountFractionResponse) String() string            { return proto.CompactTextString(m) }
func (*DayCountFractionResponse) ProtoMessage()               {}
func (*DayCountFractionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DayCountFractionResponse) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*BinaryDateRequest)(nil), "calendar.BinaryDateRequest")
	proto.RegisterType((*DayCountFractionResponse)(nil), "calendar.DayCountFractionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Calendar service

type CalendarClient interface {
	DaysInYear(ctx context.Context, in *github_com_magaldima_bizday_api.Date, opts ...grpc.CallOption) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error)
	DaysInMonth(ctx context.Context, in *github_com_magaldima_bizday_api.Date, opts ...grpc.CallOption) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error)
	Delta(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error)
	Alpha(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*DayCountFractionResponse, error)
}

type calendarClient struct {
	cc *grpc.ClientConn
}

func NewCalendarClient(cc *grpc.ClientConn) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) DaysInYear(ctx context.Context, in *github_com_magaldima_bizday_api.Date, opts ...grpc.CallOption) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error) {
	out := new(github_com_magaldima_bizday_api.NumberOfDaysResponse)
	err := grpc.Invoke(ctx, "/calendar.Calendar/DaysInYear", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DaysInMonth(ctx context.Context, in *github_com_magaldima_bizday_api.Date, opts ...grpc.CallOption) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error) {
	out := new(github_com_magaldima_bizday_api.NumberOfDaysResponse)
	err := grpc.Invoke(ctx, "/calendar.Calendar/DaysInMonth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) Delta(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error) {
	out := new(github_com_magaldima_bizday_api.NumberOfDaysResponse)
	err := grpc.Invoke(ctx, "/calendar.Calendar/Delta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) Alpha(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*DayCountFractionResponse, error) {
	out := new(DayCountFractionResponse)
	err := grpc.Invoke(ctx, "/calendar.Calendar/Alpha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Calendar service

type CalendarServer interface {
	DaysInYear(context.Context, *github_com_magaldima_bizday_api.Date) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error)
	DaysInMonth(context.Context, *github_com_magaldima_bizday_api.Date) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error)
	Delta(context.Context, *BinaryDateRequest) (*github_com_magaldima_bizday_api.NumberOfDaysResponse, error)
	Alpha(context.Context, *BinaryDateRequest) (*DayCountFractionResponse, error)
}

func RegisterCalendarServer(s *grpc.Server, srv CalendarServer) {
	s.RegisterService(&_Calendar_serviceDesc, srv)
}

func _Calendar_DaysInYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_magaldima_bizday_api.Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DaysInYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/DaysInYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DaysInYear(ctx, req.(*github_com_magaldima_bizday_api.Date))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DaysInMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_magaldima_bizday_api.Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DaysInMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/DaysInMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DaysInMonth(ctx, req.(*github_com_magaldima_bizday_api.Date))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_Delta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).Delta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/Delta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).Delta(ctx, req.(*BinaryDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_Alpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).Alpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/Alpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).Alpha(ctx, req.(*BinaryDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DaysInYear",
			Handler:    _Calendar_DaysInYear_Handler,
		},
		{
			MethodName: "DaysInMonth",
			Handler:    _Calendar_DaysInMonth_Handler,
		},
		{
			MethodName: "Delta",
			Handler:    _Calendar_Delta_Handler,
		},
		{
			MethodName: "Alpha",
			Handler:    _Calendar_Alpha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x31, 0x4b, 0xf4, 0x40,
	0x10, 0x86, 0xc9, 0x77, 0xe4, 0xe3, 0x98, 0x03, 0xc1, 0xc5, 0x22, 0x9c, 0x8d, 0x04, 0x04, 0x0b,
	0xd9, 0xc8, 0x89, 0x58, 0x58, 0xe9, 0x05, 0xd1, 0x42, 0x85, 0x74, 0x62, 0x35, 0x49, 0xc6, 0xcb,
	0x6a, 0xb2, 0x1b, 0x37, 0x13, 0x21, 0xfe, 0x03, 0xfd, 0xd5, 0x72, 0x49, 0xcc, 0x15, 0x22, 0xa7,
	0x82, 0x5d, 0x86, 0xec, 0xf3, 0xbc, 0xb3, 0xbc, 0x0b, 0x1b, 0x09, 0xe6, 0xa4, 0x53, 0xb4, 0xb2,
	0xb4, 0x86, 0x8d, 0x18, 0x7f, 0xcc, 0xd3, 0xfd, 0x85, 0xe2, 0xac, 0x8e, 0x65, 0x62, 0x8a, 0xa0,
	0xc0, 0x05, 0xe6, 0xa9, 0x2a, 0x30, 0x88, 0xd5, 0x4b, 0x8a, 0x4d, 0x80, 0xa5, 0xea, 0x3f, 0x3b,
	0xce, 0x7f, 0x75, 0x60, 0xf3, 0x4c, 0x69, 0xb4, 0x4d, 0x88, 0x4c, 0x11, 0x3d, 0xd5, 0x54, 0xb1,
	0x38, 0x01, 0xb7, 0x62, 0xb4, 0xec, 0x39, 0x3b, 0xce, 0xde, 0x64, 0xb6, 0x2b, 0x57, 0x4e, 0x39,
	0x38, 0x65, 0x2f, 0xc2, 0x52, 0xc9, 0x16, 0xee, 0x18, 0x71, 0x0c, 0x23, 0xd2, 0xa9, 0xf7, 0xef,
	0x27, 0xe8, 0x92, 0xf0, 0x0f, 0xc0, 0x0b, 0xb1, 0x99, 0x9b, 0x5a, 0xf3, 0xb9, 0xc5, 0x84, 0x95,
	0xd1, 0x11, 0x55, 0xa5, 0xd1, 0x15, 0x89, 0x2d, 0x70, 0x9f, 0x31, 0xaf, 0xa9, 0xdd, 0xc8, 0x89,
	0xba, 0x61, 0xf6, 0x36, 0x82, 0xf1, 0xbc, 0xbf, 0xb8, 0x78, 0x00, 0x08, 0xb1, 0xa9, 0x2e, 0xf5,
	0x2d, 0xa1, 0x15, 0xdf, 0x0b, 0x9e, 0x1e, 0xad, 0x3d, 0x76, 0x5d, 0x17, 0x31, 0xd9, 0x9b, 0xfb,
	0xa5, 0x7b, 0x58, 0xe7, 0x11, 0x26, 0x5d, 0xd6, 0x95, 0xd1, 0x9c, 0xfd, 0x71, 0xd8, 0x1d, 0xb8,
	0x21, 0xe5, 0x8c, 0x62, 0x5b, 0x0e, 0xad, 0x7f, 0xea, 0xec, 0xb7, 0xf2, 0x0b, 0x70, 0x4f, 0xf3,
	0x32, 0x5b, 0x23, 0xf7, 0x57, 0x3f, 0xbf, 0xaa, 0x28, 0xfe, 0xdf, 0xbe, 0xa8, 0xc3, 0xf7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x29, 0xbb, 0x17, 0x92, 0x9b, 0x02, 0x00, 0x00,
}
