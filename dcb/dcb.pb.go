// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dcb.proto

/*
Package dcb is a generated protocol buffer package.

It is generated from these files:
	dcb.proto

It has these top-level messages:
	BinaryDateRequest
	DayCountFractionResponse
	NumberOfDaysResponse
*/
package dcb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BinaryDateRequest contains two timestamps that indicate a range in time
type BinaryDateRequest struct {
	Start *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *BinaryDateRequest) Reset()                    { *m = BinaryDateRequest{} }
func (m *BinaryDateRequest) String() string            { return proto.CompactTextString(m) }
func (*BinaryDateRequest) ProtoMessage()               {}
func (*BinaryDateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BinaryDateRequest) GetStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *BinaryDateRequest) GetEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

// DayCountFractionResponse returns the dcb fraction result
type DayCountFractionResponse struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *DayCountFractionResponse) Reset()                    { *m = DayCountFractionResponse{} }
func (m *DayCountFractionResponse) String() string            { return proto.CompactTextString(m) }
func (*DayCountFractionResponse) ProtoMessage()               {}
func (*DayCountFractionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DayCountFractionResponse) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// NumberOfDaysResponse contains a single field 'value' which indicates the number of days
type NumberOfDaysResponse struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *NumberOfDaysResponse) Reset()                    { *m = NumberOfDaysResponse{} }
func (m *NumberOfDaysResponse) String() string            { return proto.CompactTextString(m) }
func (*NumberOfDaysResponse) ProtoMessage()               {}
func (*NumberOfDaysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NumberOfDaysResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*BinaryDateRequest)(nil), "dcb.BinaryDateRequest")
	proto.RegisterType((*DayCountFractionResponse)(nil), "dcb.DayCountFractionResponse")
	proto.RegisterType((*NumberOfDaysResponse)(nil), "dcb.NumberOfDaysResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DayCountBasis service

type DayCountBasisClient interface {
	// DaysInYear computes the number of days in the year of the provided timestamp
	DaysInYear(ctx context.Context, in *google_protobuf.Timestamp, opts ...grpc.CallOption) (*NumberOfDaysResponse, error)
	// DaysInMonth computes the number of days in the month of the provided timestamp
	DaysInMonth(ctx context.Context, in *google_protobuf.Timestamp, opts ...grpc.CallOption) (*NumberOfDaysResponse, error)
	// Delta computes the number of days between the pair of provided dates
	Delta(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*NumberOfDaysResponse, error)
	// Alpha computes the day count fraction.
	// The exact implementation depends on the DCB can be with a fixed or variable denominator
	Alpha(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*DayCountFractionResponse, error)
}

type dayCountBasisClient struct {
	cc *grpc.ClientConn
}

func NewDayCountBasisClient(cc *grpc.ClientConn) DayCountBasisClient {
	return &dayCountBasisClient{cc}
}

func (c *dayCountBasisClient) DaysInYear(ctx context.Context, in *google_protobuf.Timestamp, opts ...grpc.CallOption) (*NumberOfDaysResponse, error) {
	out := new(NumberOfDaysResponse)
	err := grpc.Invoke(ctx, "/dcb.DayCountBasis/DaysInYear", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayCountBasisClient) DaysInMonth(ctx context.Context, in *google_protobuf.Timestamp, opts ...grpc.CallOption) (*NumberOfDaysResponse, error) {
	out := new(NumberOfDaysResponse)
	err := grpc.Invoke(ctx, "/dcb.DayCountBasis/DaysInMonth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayCountBasisClient) Delta(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*NumberOfDaysResponse, error) {
	out := new(NumberOfDaysResponse)
	err := grpc.Invoke(ctx, "/dcb.DayCountBasis/Delta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dayCountBasisClient) Alpha(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*DayCountFractionResponse, error) {
	out := new(DayCountFractionResponse)
	err := grpc.Invoke(ctx, "/dcb.DayCountBasis/Alpha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DayCountBasis service

type DayCountBasisServer interface {
	// DaysInYear computes the number of days in the year of the provided timestamp
	DaysInYear(context.Context, *google_protobuf.Timestamp) (*NumberOfDaysResponse, error)
	// DaysInMonth computes the number of days in the month of the provided timestamp
	DaysInMonth(context.Context, *google_protobuf.Timestamp) (*NumberOfDaysResponse, error)
	// Delta computes the number of days between the pair of provided dates
	Delta(context.Context, *BinaryDateRequest) (*NumberOfDaysResponse, error)
	// Alpha computes the day count fraction.
	// The exact implementation depends on the DCB can be with a fixed or variable denominator
	Alpha(context.Context, *BinaryDateRequest) (*DayCountFractionResponse, error)
}

func RegisterDayCountBasisServer(s *grpc.Server, srv DayCountBasisServer) {
	s.RegisterService(&_DayCountBasis_serviceDesc, srv)
}

func _DayCountBasis_DaysInYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayCountBasisServer).DaysInYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcb.DayCountBasis/DaysInYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayCountBasisServer).DaysInYear(ctx, req.(*google_protobuf.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayCountBasis_DaysInMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayCountBasisServer).DaysInMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcb.DayCountBasis/DaysInMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayCountBasisServer).DaysInMonth(ctx, req.(*google_protobuf.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayCountBasis_Delta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayCountBasisServer).Delta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcb.DayCountBasis/Delta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayCountBasisServer).Delta(ctx, req.(*BinaryDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DayCountBasis_Alpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DayCountBasisServer).Alpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcb.DayCountBasis/Alpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DayCountBasisServer).Alpha(ctx, req.(*BinaryDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DayCountBasis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcb.DayCountBasis",
	HandlerType: (*DayCountBasisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DaysInYear",
			Handler:    _DayCountBasis_DaysInYear_Handler,
		},
		{
			MethodName: "DaysInMonth",
			Handler:    _DayCountBasis_DaysInMonth_Handler,
		},
		{
			MethodName: "Delta",
			Handler:    _DayCountBasis_Delta_Handler,
		},
		{
			MethodName: "Alpha",
			Handler:    _DayCountBasis_Alpha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcb.proto",
}

func init() { proto.RegisterFile("dcb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x86, 0x49, 0x4b, 0x3e, 0xf8, 0xa6, 0x78, 0x70, 0x29, 0x12, 0x03, 0xa2, 0xe4, 0xe4, 0xa1,
	0xa4, 0xa5, 0xde, 0x3c, 0x08, 0xb6, 0x41, 0xf0, 0xa0, 0x42, 0xf0, 0xe2, 0x71, 0x92, 0x4c, 0xdb,
	0x40, 0xb2, 0x1b, 0x77, 0x27, 0x42, 0xfe, 0x88, 0xbf, 0x57, 0xb2, 0x6b, 0x4e, 0xb6, 0x15, 0x3c,
	0xee, 0xf2, 0xbc, 0xcf, 0x3b, 0xbc, 0xf0, 0xbf, 0xc8, 0xb3, 0xb8, 0xd1, 0x8a, 0x95, 0x18, 0x17,
	0x79, 0x16, 0x5e, 0x6e, 0x95, 0xda, 0x56, 0x34, 0xb7, 0x5f, 0x59, 0xbb, 0x99, 0x73, 0x59, 0x93,
	0x61, 0xac, 0x1b, 0x47, 0x45, 0x06, 0x4e, 0x57, 0xa5, 0x44, 0xdd, 0x25, 0xc8, 0x94, 0xd2, 0x7b,
	0x4b, 0x86, 0xc5, 0x02, 0x7c, 0xc3, 0xa8, 0x39, 0xf0, 0xae, 0xbc, 0xeb, 0xc9, 0x32, 0x8c, 0x9d,
	0x25, 0x1e, 0x2c, 0xf1, 0xeb, 0x60, 0x49, 0x1d, 0x28, 0x66, 0x30, 0x26, 0x59, 0x04, 0xa3, 0x5f,
	0xf9, 0x1e, 0x8b, 0x16, 0x10, 0x24, 0xd8, 0xad, 0x55, 0x2b, 0xf9, 0x41, 0x63, 0xce, 0xa5, 0x92,
	0x29, 0x99, 0x46, 0x49, 0x43, 0x62, 0x0a, 0xfe, 0x07, 0x56, 0x2d, 0xd9, 0x6e, 0x2f, 0x75, 0x8f,
	0x68, 0x06, 0xd3, 0xe7, 0xb6, 0xce, 0x48, 0xbf, 0x6c, 0x12, 0xec, 0xcc, 0x7e, 0xda, 0xff, 0xa6,
	0x97, 0x9f, 0x23, 0x38, 0x19, 0x0a, 0x56, 0x68, 0x4a, 0x23, 0xd6, 0x00, 0x7d, 0xee, 0x51, 0xbe,
	0x11, 0x6a, 0x71, 0xe4, 0xc0, 0xf0, 0x3c, 0xee, 0x27, 0xdc, 0x5b, 0x96, 0xc0, 0xc4, 0x49, 0x9e,
	0x94, 0xe4, 0xdd, 0x5f, 0x2d, 0xb7, 0xe0, 0x27, 0x54, 0x31, 0x8a, 0x33, 0xcb, 0xfc, 0x58, 0xff,
	0x58, 0xf6, 0x0e, 0xfc, 0xfb, 0xaa, 0xd9, 0x1d, 0xce, 0x5e, 0xd8, 0xff, 0x43, 0xe3, 0x66, 0xff,
	0xec, 0xa9, 0x37, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x68, 0xed, 0xe2, 0x27, 0x02, 0x00,
	0x00,
}
