// Code generated by protoc-gen-go. DO NOT EDIT.
// source: holiday.proto

/*
Package holiday is a generated protocol buffer package.

It is generated from these files:
	holiday.proto

It has these top-level messages:
	BinaryDateRequest
	BoolResponse
	NumberOfDaysResponse
*/
package holiday

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BinaryDateRequest contains two timestamps that indicate a range in time
type BinaryDateRequest struct {
	Start *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *BinaryDateRequest) Reset()                    { *m = BinaryDateRequest{} }
func (m *BinaryDateRequest) String() string            { return proto.CompactTextString(m) }
func (*BinaryDateRequest) ProtoMessage()               {}
func (*BinaryDateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BinaryDateRequest) GetStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *BinaryDateRequest) GetEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

// BoolResponse contains a single field 'ok' which indicates the boolean result
type BoolResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *BoolResponse) Reset()                    { *m = BoolResponse{} }
func (m *BoolResponse) String() string            { return proto.CompactTextString(m) }
func (*BoolResponse) ProtoMessage()               {}
func (*BoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BoolResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// NumberOfDaysResponse contains a single field 'value' which indicates the number of days
type NumberOfDaysResponse struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *NumberOfDaysResponse) Reset()                    { *m = NumberOfDaysResponse{} }
func (m *NumberOfDaysResponse) String() string            { return proto.CompactTextString(m) }
func (*NumberOfDaysResponse) ProtoMessage()               {}
func (*NumberOfDaysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NumberOfDaysResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*BinaryDateRequest)(nil), "holiday.BinaryDateRequest")
	proto.RegisterType((*BoolResponse)(nil), "holiday.BoolResponse")
	proto.RegisterType((*NumberOfDaysResponse)(nil), "holiday.NumberOfDaysResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Holiday service

type HolidayClient interface {
	// IsHoliday returns true in the response if the provided date is a holiday
	IsHoliday(ctx context.Context, in *google_protobuf.Timestamp, opts ...grpc.CallOption) (*BoolResponse, error)
	// Delta returns the number of holiday dates between the provided pair of dates
	Delta(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*NumberOfDaysResponse, error)
}

type holidayClient struct {
	cc *grpc.ClientConn
}

func NewHolidayClient(cc *grpc.ClientConn) HolidayClient {
	return &holidayClient{cc}
}

func (c *holidayClient) IsHoliday(ctx context.Context, in *google_protobuf.Timestamp, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/holiday.Holiday/IsHoliday", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidayClient) Delta(ctx context.Context, in *BinaryDateRequest, opts ...grpc.CallOption) (*NumberOfDaysResponse, error) {
	out := new(NumberOfDaysResponse)
	err := grpc.Invoke(ctx, "/holiday.Holiday/Delta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Holiday service

type HolidayServer interface {
	// IsHoliday returns true in the response if the provided date is a holiday
	IsHoliday(context.Context, *google_protobuf.Timestamp) (*BoolResponse, error)
	// Delta returns the number of holiday dates between the provided pair of dates
	Delta(context.Context, *BinaryDateRequest) (*NumberOfDaysResponse, error)
}

func RegisterHolidayServer(s *grpc.Server, srv HolidayServer) {
	s.RegisterService(&_Holiday_serviceDesc, srv)
}

func _Holiday_IsHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolidayServer).IsHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/holiday.Holiday/IsHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolidayServer).IsHoliday(ctx, req.(*google_protobuf.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holiday_Delta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolidayServer).Delta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/holiday.Holiday/Delta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolidayServer).Delta(ctx, req.(*BinaryDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Holiday_serviceDesc = grpc.ServiceDesc{
	ServiceName: "holiday.Holiday",
	HandlerType: (*HolidayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsHoliday",
			Handler:    _Holiday_IsHoliday_Handler,
		},
		{
			MethodName: "Delta",
			Handler:    _Holiday_Delta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "holiday.proto",
}

func init() { proto.RegisterFile("holiday.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x69, 0xa5, 0x8e, 0x5e, 0x7f, 0xc0, 0x30, 0xc2, 0x10, 0xf0, 0x87, 0xae, 0x5c, 0x0c,
	0x19, 0x19, 0xf7, 0x2e, 0x4a, 0x17, 0xba, 0x51, 0x08, 0xbe, 0x40, 0xca, 0xdc, 0x19, 0xcb, 0xa4,
	0xbd, 0xb5, 0xb9, 0x15, 0xfa, 0x10, 0xbe, 0xb3, 0xd8, 0x98, 0x8a, 0x22, 0xba, 0x3c, 0xb9, 0x1f,
	0xe7, 0x9c, 0x1c, 0x38, 0x7a, 0x26, 0x5b, 0xae, 0x4c, 0xaf, 0x9a, 0x96, 0x98, 0xc4, 0xe4, 0x53,
	0xca, 0x8b, 0x0d, 0xd1, 0xc6, 0xe2, 0x62, 0x78, 0x2e, 0xba, 0xf5, 0x82, 0xcb, 0x0a, 0x1d, 0x9b,
	0xaa, 0xf1, 0x64, 0xea, 0xe0, 0x24, 0x2b, 0x6b, 0xd3, 0xf6, 0xb9, 0x61, 0xd4, 0xf8, 0xd2, 0xa1,
	0x63, 0x71, 0x0d, 0x89, 0x63, 0xd3, 0xf2, 0x2c, 0xba, 0x8c, 0xae, 0x0e, 0x96, 0x52, 0x79, 0x17,
	0x15, 0x5c, 0xd4, 0x53, 0x70, 0xd1, 0x1e, 0x14, 0x73, 0xd8, 0xc1, 0x7a, 0x35, 0x8b, 0xff, 0xe5,
	0x3f, 0xb0, 0xf4, 0x1c, 0x0e, 0x33, 0x22, 0xab, 0xd1, 0x35, 0x54, 0x3b, 0x14, 0xc7, 0x10, 0xd3,
	0x76, 0x08, 0xdb, 0xd3, 0x31, 0x6d, 0xd3, 0x39, 0x4c, 0x1f, 0xba, 0xaa, 0xc0, 0xf6, 0x71, 0x9d,
	0x9b, 0xde, 0x8d, 0xdc, 0x14, 0x92, 0x57, 0x63, 0x3b, 0x1c, 0xd0, 0x44, 0x7b, 0xb1, 0x7c, 0x8b,
	0x60, 0x72, 0xe7, 0xff, 0x2b, 0x6e, 0x61, 0xff, 0xde, 0x05, 0xf1, 0x47, 0x0f, 0x79, 0xaa, 0xc2,
	0x62, 0xdf, 0x9a, 0x64, 0x90, 0xe4, 0x68, 0xd9, 0x08, 0xf9, 0x75, 0xff, 0x39, 0x8f, 0x3c, 0x1b,
	0x6f, 0xbf, 0xb5, 0x2c, 0x76, 0x87, 0xb8, 0x9b, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x76, 0x69,
	0x59, 0xaf, 0x94, 0x01, 0x00, 0x00,
}
